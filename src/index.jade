!!! 5
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Audio Tags: Web Components + Web Audio = ♥

    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')

    link(rel='stylesheet', type='text/css', href='styles/main.css')

  body

    article

      section
        h1 Audio Tags:<br />Web Components + Web Audio = ♥ 

      section
        h2 <a href="http://soledadpeandes.com">Soledad Penadés</a>
        h3.bullet Apps Engineer at <a href="http://mozilla.org">Mozilla</a>
        ul
          li @supersole
          li #apps in irc.mozilla.org
          li <a href="http://chat.meatspac.es">chat.meatspac.es</a>


      section
        h2 I'm totally into music
        ul
          li
          li 150+ <a href="http://supersole.net/songs">songs</a>
          li Writing audio "toys" for the last 5 years


      section
        h1 2008
        h2.bullet Sorollet
        ul
          li "Tiny noise" in Catalan
          li Pure C
          li No GUI
          li The GUI was <em>me</em>


      section
        h2 Sorollet V1 example
        h3.bullet (<a href="https://github.com/sole/demoscene/blob/master/releases/xplsv/to_the_beat/src/sorollet.c#L465">fragment</a>)
        hr
        code.language-c
          pre.
            if(synth->pitch_envelope_active)
            {
              actual_note += (int) (map(
                sorollet_adsr_update(&synth->pitch_envelope, t),
                0, 1, -12, 12)
              );
            }

       
      section
        h1 2010
        h2.bullet Sorollet V2
        ul
          li VSTi
          li C++
          li I had a GUI!


      section
        img(src='img/sorollet-20100210.png')


      section
        h2 Sorollet V2 example
        h3.bullet (<a href="https://github.com/sole/sorollet/blob/master/src/core/SorolletVoice.cpp#L180">fragment</a>)

        hr
  
        code.language-c
          pre.
            float pitchEnv = mPitchADSR->update(bufferTime);

        hr.bottom

        p <a href="http://supersole.net/song/179-bizarria-sorollosa">my sample song</a>


      section
        h1 People used it!
        h2.bullet *\o/*
        ul
          li Ubuntu PPA
          li Fedora
          li In <a href="https://soundcloud.com/visinin/shiranai-lost-in-london-remix">cool songs</a>!


      section
        h1 2011
        h2.bullet Audio in the browser
        ul
          li <tt>&lt;audio&gt;</tt> tag hacks
          li Firefox's <strong>AudioData</strong>
          li Chrome's <strong>Web Audio</strong>


      section
        h1 Audio Data vs Web Audio
        h2.bullet Why did Web Audio win?
        ul
          li Audio Data was 'just a buffer'
          li Web Audio is modular
          li ... and includes many useful ready-made units
          li Plus 3D audio support


      section
        h1 2013
        h2.bullet W3C Web Audio API
        ul
          li Chrome's API became the standard
          li Implemented in Firefox too!
          li It's even in iOS
          li Chrome mobile
          li Firefox for Android: in the works
          li It's all very <strong>exciting</strong>!


      section
        h1 2013
        h2.bullet Web Components


      section
        h1.bullet ... but what is a "component"?
        h2.bullet.quote "A constituent part; element; ingredient."


      section
        h1 Screws
        img(src='img/screws.jpg')


      section
        h1 Resistors
        img(src='img/resistors.jpg')


      section
        h1 Doorbell
        img(src='img/doorbell.jpg')


      section
        h1.bullet Web components
        h2.bullet == custom DOM elements
        ul
          li custom behaviour
          li custom appearance
          li encapsulation
          li reusability

      section
        h1.bullet And here comes the crazy idea...
        h2.bullet Why not audio components?


      section
        h1.bullet Perfect sense
        h2.bullet Web Audio is modular
        h2.bullet Web Components are modular


      section
        h1.bullet Audio Tags
        h2.bullet Custom audio... 
          span.bullet with less boilerplate


      section
        h1 Let's build a simple synthesiser


      section
        h1.bullet The audio context
        h2.bullet Where things happen


      section
        h1 The audio context
        
        code.language-html
          pre.
            <audio-context>
            </audio-context>


      section
        h1.bullet Oscillator
        h2.bullet Generates periodic waveforms


      section
        h1 Oscillator

        code.language-html
          pre.
            <audio-context>
              <audio-oscillator>
              </audio-oscillator>
            </audio-context>

        hr

        h3 <a href="/examples/02_context_oscillator/" target="_blank">Example</a>


      section
        h1.bullet Mixer
        h2.bullet Adds the output of its children into a single output

      section
        h1 Mixer

        code.language-html
          pre.
            <audio-context>
              <audio-mixer>
                <audio-oscillator frequency="220"></audio-oscillator>
                <audio-oscillator frequency="440"></audio-oscillator>
              </audio-mixer>
            </audio-context>

        hr

        h3 <a href="/examples/03_mixer/" target="_blank">Example</a>


      section
        h1.bullet Chain
        h2.bullet Connects the output of each child to the next child


      section
        h1 Chain

        code.language-html
          pre.
            <audio-context>
              <audio-chain>
                <audio-oscillator frequency="220"></audio-oscillator>
                <audio-oscilloscope></audio-oscilloscope>
              </audio-chain>
            </audio-context>

        hr

        h3 <a href="/examples/04_chain/" target="_blank">Example</a>


      section
        h1.bullet Oscilloscope
        h2.bullet Displays whatever it's connected to its input
        h3.bullet The input gets through to the output, unmodified


      section
        h1.bullet Filter
        h2.bullet Modifies the input by letting some frequencies pass


      section
        h1 Filter

        code.language-html
          pre.
            <audio-context>
              <audio-chain>
                <audio-oscillator frequency="220"></audio-oscillator>
                <audio-filter type="lowpass"></audio-filter>
              </audio-chain>
            </audio-context>

        hr

        h3 <a href="/examples/05_filter/" target="_blank">Example</a>


      section
        h1.bullet Minisynth
        h2.bullet It will have...
        ul
          li Two oscillators
          li A filter


      section
        h1 Minisynth

        code.language-html
          pre.
            <audio-chain>
              <audio-mixer>
                <audio-oscillator></audio-oscillator>
                <audio-oscillator></audio-oscillator>
              </audio-mixer>
              <audio-filter type="lowpass"></audio-filter>
            </audio-chain>


      section
        h1 Minisynth
        h2 With raw Web Audio

        code.language-js
          pre.
            var mixerGain = context.createGain();

            var osc1 = context.createOscillator();
            var osc2 = context.createOscillator();
            osc1.connect(mixerGain);
            osc2.connect(mixerGain);

            var filter = context.createBiquadFilter();
            mixerGain.connect(filter);

            // output is at *filter*


      section
        h1 Minisynth
        h2 <tt>start</tt>

        code.language-javascript
          pre.
            start: function(when) {
              var oscGain = this.oscillators.length > 0 ?
                1.0 / this.oscillators.length : 1.0;
              this.oscillators.forEach(function(osc) {
                  osc.gain = oscGain;
                  osc.start(when);
              });
            }


      section
        h1 Minisynth
        h2 <tt>stop</tt>

        code.language-javascript
          pre.
            stop: function(when) {
              this.oscillators.forEach(function(osc) {
                  osc.stop(when);
              });
            }


      section
        h1 Minisynth
        h2 <tt>noteOn</tt>

        code.language-javascript
          pre.
            noteOn: function(noteNumber) {
              this.oscillators.forEach(function(osc, index) {
                var oscNoteNumber = noteNumber + 12 * index;
                var frequency = 
                  MIDIUtils.noteNumberToFrequency(oscNoteNumber);
                osc.frequency = frequency;
              });
            }


      section
        h1.bullet Triggering notes
        h2.bullet What about a keyboard?


      section
        h1 Keyboard
        
        code.language-html
          pre.
            <audio-keyboard octaves="2"></audio-keyboard>


      section
        h1 Keyboard events
        h2 <tt>noteon</tt>

        code.language-js
          pre.
            keyboard.addEventListener('noteon', function(e) {

              var noteIndex = e.detail.index;
              minisynth.noteOn(parseInt(noteIndex, 10) + 40);
              minisynth.start();

            }, false);


      section
        h1 Keyboard events
        h2 <tt>noteoff</tt>

        code.language-js
          pre.
            keyboard.addEventListener('noteoff', function(e) {

              minisynth.noteOff();
              
            }, false);


      section
        h1 <a href="/examples/07_mini_synth/">DEMO</a>


      section
        h1.bullet Now... 
          span.bullet we have our instrument


      section
        h1 We are rockstars!


      section
        h1 And rockstars need to look COOL


      section
        h1.bullet They have signature guitars...


      section
        h1.bullet We have CSS!!!


      section
        h1.bullet So let's turn our humble synth...
        h2.bullet into <a href="/examples/07_mini_synth/">a fiery hot object of desire</a>


      section
        h1.bullet Wrap up
        h2.bullet Audio tags allow you to experiment with Web Audio without drowning in details
        h3.bullet But this is just a prototype


      section
        h1.bullet Call for forks
        h2.bullet <a href="https://github.com/sole/audio-tags">github.com/sole/audio-tags</a>


      section
        h1 Thank you!
        h2 Soledad Penadés
        h2 @supersole
        h2 sole@mozilla.com


      
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
